apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {

    compileSdkVersion defaultCompileSdkVersion

    defaultConfig {
        applicationId "com.smasher.rejuvenation"
        minSdkVersion defaultMinSdkVersion
        targetSdkVersion defaultTargetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled = true

    }

    buildTypes {
        release {
            minifyEnabled true
            multiDexEnabled = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.core:core-ktx:$core_ktx"
    implementation "androidx.multidex:multidex:$multidex"
    implementation "androidx.appcompat:appcompat:$appcompat"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.anko:anko-common:$anko_version"

    //butterknife
    implementation "com.jakewharton:butterknife:$butterknife"
    //annotationProcessor是处理注解的工具，是APT(Annotation Processing Tool)的一种
    annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeCompiler"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary"
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    // Optional, if you use support library fragments:
    debugImplementation 'com.squareup.leakcanary:leakcanary-support-fragment:1.6.3'

    implementation project(path: ':core')
    implementation project(path: ':dagger2')
    implementation project(path: ':zxing')
    implementation project(path: ':draw')
    implementation project(path: ':downloader')
    implementation project(path: ':ndk')
    //implementation project(path: ':aidl')
    implementation project(path: ':widget')
    implementation project(path: ':media')
    implementation project(path: ':rxjava')

    testImplementation "junit:junit:$junit"
    androidTestImplementation "androidx.test:runner:$test_runner"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_core"


    kapt "com.github.bumptech.glide:compiler:$glideCompiler"
    annotationProcessor "com.github.bumptech.glide:compiler:$glideCompiler"
    implementation "com.github.bumptech.glide:annotations:$glide_annotations"

    implementation "pub.devrel:easypermissions:$permission"

    implementation "com.google.dagger:dagger:$dagger"
    implementation "com.google.dagger:dagger-android-support:$dagger_android_support"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_compiler"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_android_processor"
    kapt "com.google.dagger:dagger-compiler:$dagger_compiler"

    def room_version = '2.2.4'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

}
